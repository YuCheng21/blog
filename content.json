{"meta":{"title":"YuCheng","subtitle":"","description":"YuCheng's blog","author":"YuCheng","url":"https://blog.yucheng.me","root":"/"},"pages":[{"title":"404 Not Found","date":"2021-10-06T09:52:32.438Z","updated":"2021-10-06T09:52:32.438Z","comments":false,"path":"404.html","permalink":"https://blog.yucheng.me/404.html","excerpt":"","text":"404 很抱歉，您訪問的頁面不存在 可能是輸入地址有誤或該地址已被刪除 返回首頁"},{"title":"","date":"2021-10-06T09:52:32.458Z","updated":"2021-10-06T09:52:32.458Z","comments":true,"path":"manifest.json","permalink":"https://blog.yucheng.me/manifest.json","excerpt":"","text":"{\"name\":\"YuCheng\",\"short_name\":\"YuCheng\",\"theme_color\":\"#69a4a7\",\"background_color\":\"#69a4a7\",\"display\":\"standalone\",\"scope\":\"/\",\"start_url\":\"/\",\"icons\":[{\"src\":\"https://cdn.jsdelivr.net/gh/YuCheng21/cdn-yucheng@master/blog/favicon/favicon-16x16.png\",\"sizes\":\"16x16\",\"type\":\"image/png\"},{\"src\":\"https://cdn.jsdelivr.net/gh/YuCheng21/cdn-yucheng@master/blog/favicon/favicon-32x32.png\",\"sizes\":\"32x32\",\"type\":\"image/png\"},{\"src\":\"https://cdn.jsdelivr.net/gh/YuCheng21/cdn-yucheng@master/blog/favicon/android-chrome-192x192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"https://cdn.jsdelivr.net/gh/YuCheng21/cdn-yucheng@master/blog/favicon/android-chrome-512x512.png\",\"sizes\":\"512x512\",\"type\":\"image/png\"}],\"splash_pages\":null}"},{"title":"關於","date":"2021-10-06T09:52:32.458Z","updated":"2021-10-06T09:52:32.458Z","comments":false,"path":"about/index.html","permalink":"https://blog.yucheng.me/about/index.html","excerpt":"","text":"馮宇丞 | Thomas Feng嗨，我是宇丞！我目前在就讀大學主修電機工程。我平時喜歡從網路上學習新知識與新技能，並將過程中所學到的內容製作筆記來幫助我記憶。解決學習中遇到的困難，從錯誤中學習，在失敗中成長！ 基本資料個性愛好本站配置 About me：https://me.yucheng.me/ Wiki：https://no.yucheng.me GitHub：https://github.com/YuCheng21 E-mail：&#x66;&#121;&#99;&#x36;&#50;&#49;&#64;&#x67;&#109;&#97;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d; Facebook：https://www.facebook.com/yucheng621 Telegram：https://t.me/fyc621 Location：高雄, 台灣 敗家 完美主義 好奇心 搭建工具：Hexo 5.1.1 使用主題：Butterfly 3.3.0 網站存放：Github Pages 域名註冊：Namesilo CDN 加速：Cloudflare"},{"title":"分類","date":"2021-10-06T09:52:32.458Z","updated":"2021-10-06T09:52:32.458Z","comments":false,"path":"categories/index.html","permalink":"https://blog.yucheng.me/categories/index.html","excerpt":"","text":""},{"title":"標籤","date":"2021-10-06T09:52:32.458Z","updated":"2021-10-06T09:52:32.458Z","comments":false,"path":"tags/index.html","permalink":"https://blog.yucheng.me/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hexo 基本配置","slug":"Hexo 基本配置","date":"2020-11-15T15:44:59.000Z","updated":"2021-10-06T09:52:32.458Z","comments":true,"path":"post/hexo-configuration/","link":"","permalink":"https://blog.yucheng.me/post/hexo-configuration/","excerpt":"","text":"自訂文章網址 在 permalink 中使用一個新增的變數 urlname。 在 permalink_defaults 中設定 urlname 的預設值為 index。 之後要自訂文章網址時，只需要在 Markdown 文件中的 Front-matter 內設定 urlname 就可以客製化文章網址了。 /_config.yml 123permalink: post/:urlname/permalink_defaults: urlname: index 未來在要發布的文章 Front-matter 上增加剛剛設定的 urlname 並設定自訂網址即可自訂文章網址。 example_post.md 12345---layout: posturlname: 文章網址title: 文章標題--- 自訂網站網址以設定 example.com 網域為例： 設定 Hexo 配置檔 /_config.yml 12url: https://example.comroot: / 如果網站存放在子目錄中，例如 http://example.com/blog，請將 url 設為 http://example.com/blog 並把 root 設為 /blog/。 設定網址 DNS前往網址供應商的設定頁面設定 DNS A @ Github Pages A @ 185.199.108.153 A @ 185.199.109.153 A @ 185.199.110.153 A @ 185.199.111.153 CNAME @ Github Repositories CNAME www example.com 以上有兩種類型設定分別是 A 記錄 和 CNAME 記錄，兩者重點都是在設定名稱和內容，不同的點在於： A 記錄是以名稱指向 IP 地址（內容）。 CNAME 記錄是以名稱指向伺服器名稱（內容） 這裡指的名稱其實也是指伺服器名稱，但在設定上只需要設定子網域就可以，例如像名稱 www 對應的就是 www.example.com，而blog 對應的就是 blog.example.com。www 和 blog 這部分也叫做子網域，每個子網域都是獨立分開的，如果不打算使用子網域，要直接使用主網域則設定 @ 對應在 example.com 上。 了解名稱的意義後接著就要決定這個網域要指向哪裡，分別有兩種方法為 A 記錄與 CNAME 記錄。A 記錄指向的是 IP 地址，例如 xxx.xxx.xxx.xxx。CNAME 記錄指向的是伺服器名稱，例如 example.com。在設定 DNS 的時候要選擇 A 還是 CNAME 可以看自己的狀況決定。 上述例子是用 A 記錄以 example.com 指向 185.199.108.153，也就是 Github Pages 的地址，再用 CNAME 記錄以 www.example.com 指向 example.com。這樣一來，不管是 example.com 還是 www.example.com 最後都可以訪問到 Github Pages 的地址。 設定 Github Repositories Github Repositories/Setting/Option/GitHub Pages Source Branch: master設定自己要發佈哪個分支，這裡選擇 master。 Folder: /root設定要發佈的資料夾位置，如果放在根目錄就選擇 root。 Save Custom domain example.com這裡設定完 Custom domain 後會產生一個 commit，在根目錄建立一個 CNAME 檔案，裡面存放你的自訂網域，Custom domain 會以 CNAME 檔案內的網域為準，因此你也可以自己建立 CNAME 來設定 Custom domain，或直接複製 Github Pages 產生的 CNAME 放到 /source/ 目錄下，這樣以後每次發佈網站之後 CNAME 也才會在網站的根目錄上。 設定 CNAME /source/CNAME 1example.com 至於為什麼要創建 CNAME 呢？前面設定網域導向到 Github Pages 的地址後還有一個問題是，Github Pages 的用戶數很多，當別人從你的網域指向他們的地址後，他們不知道來自這個網域的訪問要導向哪個用戶的儲存庫，因此在儲存庫的跟資料夾底下放一個檔案叫 CNAME，裡面儲存你的網域名稱，Github Pages 會去從這個檔案中知道這個儲存庫是要接收來自 CNAME 儲存的網域名稱，把訪問導向你的儲存庫。 設定新增文章格式通常使用 hexo new post &lt;title&gt; 來新增文章時，是直接使用 &lt;title&gt; 來當作資料夾和檔案的名稱，當檔案多的時候可能會有些不好管理，這裡設定 new_post_name 來調整資料夾和檔案的名稱。 /_config.yml 1new_post_name: :year:month:day - :title.md 這樣檔案開頭都會統一以日期當作編號，可以了解文章的發布日期當作參考。 同時也可以在 /scaffolds 內的 post 或 draft 設定新增的文章 Front-matter 預設的格式。 設定不渲染的檔案在發布網站時 Hexo 會將 /source 下的 Markdown 檔案經過 /themes 內選擇的主題進行渲染，如果有不想要經過主題渲染的檔案的話，可以在配置檔案中設定例外檔案。 /_config.yml 1skip_render: README.md 忽略 README.md 讓上傳到 Github 上時，使用原始的 README.md 檔案，顯示儲存庫的說明文件。 使用各別文章資料夾文章內要使用檔案時可以將檔案放在 /source/images 中使用，當文章多的時候同樣可能會不好管理，這裡通過設定 post_asset_folder 來開啟各別文章資料夾。 /_config.yml 1post_asset_folder: true 這樣每當使用 hexo new post &lt;title&gt; 建立新文章時，同時會在 _post 內建立一個和 &lt;title&gt; 同名的資料夾，將文章需要的檔案放在資料夾內，就可以直接使用檔案。 首頁每頁顯示的文章數 /_config.yml 12345678# 首頁設定# path: 網站首頁根路徑。（預設 = &#x27;&#x27;）# per_page: 每頁顯示的文章數量（0 = 禁用分頁）# order_by: 文章排序（預設按日期遞減排序）index_generator: path: &#x27;&#x27; per_page: 6 order_by: -date sitemap.xml 搜尋引擎爬蟲設定 Google 搜尋引擎收錄資料 進入 Google Search Console 驗證自己的網域，驗證網域的方式有很多種，選擇一種適合自己的方法即可。 接下來要使用 Google Search Concole 的 Sitemap 功能，將網站的 Sitemap 提交給 Google，提供給搜尋引擎爬蟲使用。這裡先安裝可以自動產生 sitemap.xml 的套件 hexo-generator-sitemap。 1npm install hexo-generator-sitemap --save 接著在 _config.yml 增加 Sitemap 設定 /_config.yml 12345678# Sitemap# path：sitemap 路徑# tags：是否要包含標籤（不包含標籤頁）# categories：是否要包含分類（不包含分類頁）sitemap: path: sitemap.xml tags: false categories: false 之後每當 Hexo 產生網站的靜態資源時，也會自動產生一個 sitemap.xml 在 Public 目錄下，也就是發佈到網站上時會在根目錄上 example.com/sitemap.xml，之後再到 Google Search Console 上的 Sitemap 功能頁面新增 sitemap.xml。 這樣以後 Google 的爬蟲就會定期去看 sitemap.xml 檔案是否有更新，若有更新他就會去爬你的網站並加入到搜尋引擎中了。 如果有特定的頁面不希望被加入 sitemap.xml 中，可以在頁面的 markdown 中 Front-matter 設定 sitemap: false。 123---sitemap: false--- robots.txt 管理爬蟲robots.txt 與設定 meta robots 不同在於，meta 內設定的是建立索引 (index) 和連結權重 (follow)，而 robots.txt 設定的是告訴爬蟲機器人哪些是可以爬的，哪些是不能爬的。 建立索引只在當爬蟲機器人要把你的網址索引在搜尋引擎上時會作用。連結權重只負責決定你的頁面是否擔保連出去的連結。然而不管有沒有設定上面兩個，爬蟲機器人都有可能會進到你的網站爬取資料，例如從別人的網站連結近來，如果你有某個頁面不希望被爬到，除了在 sitemap.xml 內不要放入這個頁面外，還可以在網頁根目錄中配置一個檔案 robots.txt，用來控制爬蟲機器人在網站中某些頁面能不能存取。 這裡我沒有特別需要阻擋特定頁面，因此 robots.txt 設定全部允許。 User-agent : 爬蟲程式的名字 必要項目，可以在每項規則中指定一或多個 user-agent。 Disallow : 不應爬取的網頁網址 每項規則至少要有一個 Disallow 或 Allow 的指令，Disallow 用以表示禁止爬蟲程式的項目。若為網頁，應撰寫完整的相對路徑；若為目錄，則必須以 / 作為結尾。 Allow : 允許爬取的網頁網址 每項規則至少要有一個 Disallow 或 Allow 的指令，Allow 用以表示允許爬蟲程式的項目，可覆蓋以 Disallow 禁止的項目。若為網頁，應撰寫完整的相對路徑；若為目錄，則必須以 / 作為結尾。 Crawl-delay : 抓取網頁前延遲 非必要項目，用以告訴在開始抓取網頁前延遲多久，單位為毫秒。 Sitemap : 網站地圖的路徑 非必要，可以透過這個指令指出 XML 網站地圖的位置，也可以同時提供多個網站地圖分行列出，此項目應使用絕對路徑。 1234User-agent: *Disallow:Sitemap: https://example.com/sitemap Google Analytics 分析流量在搜尋引擎收錄完我們的文章後，我們可以利用 Google Analytics（簡稱 GA） 分析我們的網站流量，從分析結果了解我們網站的效果。首先進入 GA 建立帳戶，建立完帳戶後再新增資源，之後再新增串流，也就是我們的網站，完成後依照說明讓網頁嵌入指定代碼即可。 測試使用者方法可以開無痕視窗瀏覽，讓瀏覽器重新請求一次。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.yucheng.me/categories/Hexo/"}],"tags":[{"name":"子網域","slug":"子網域","permalink":"https://blog.yucheng.me/tags/%E5%AD%90%E7%B6%B2%E5%9F%9F/"},{"name":"網站地圖","slug":"網站地圖","permalink":"https://blog.yucheng.me/tags/%E7%B6%B2%E7%AB%99%E5%9C%B0%E5%9C%96/"},{"name":"搜尋引擎收錄","slug":"搜尋引擎收錄","permalink":"https://blog.yucheng.me/tags/%E6%90%9C%E5%B0%8B%E5%BC%95%E6%93%8E%E6%94%B6%E9%8C%84/"},{"name":"Google Analytics","slug":"Google-Analytics","permalink":"https://blog.yucheng.me/tags/Google-Analytics/"}]},{"title":"Hexo ButterFly 主題配置","slug":"Hexo ButterFly 主題配置","date":"2020-11-09T12:31:17.000Z","updated":"2021-10-06T09:52:32.458Z","comments":true,"path":"post/hexo-butterfly-theme-configuration/","link":"","permalink":"https://blog.yucheng.me/post/hexo-butterfly-theme-configuration/","excerpt":"","text":"基本設定將主題內的配置檔 /themes/butterfly/_config.yml 複製到根目錄 /，並重新命名成 _config.butterfly.yml，這樣根目錄的配置檔案設定會覆蓋主題內的配置檔案設定，在升級主題時比較好升級。 Butterfly 安裝文檔 (一) 快速開始 Butterfly 安裝文檔 (二) 主題頁面 Butterfly 安裝文檔 (三) 主題配置 - 1 Butterfly 安裝文檔 (四) 主題配置 - 2 Butterfly 安裝文檔 (五) 主題問答 Butterfly 安裝文檔 (六) 進階教程 Butterfly 安裝文檔 (七) 更新日誌 滾動條外觀 /source/css/_global/index.styl 1234567891011121314151617181920212223// 滾動條*::-webkit-scrollbar width: 12px height: 12px// 滾動條背景*::-webkit-scrollbar-track background-color: transparent// 滾動條背景: 懸停::-webkit-scrollbar-track:hover// 滾動條方塊*::-webkit-scrollbar-thumb background: var(--btn-bg) border-radius: 8px// 滾動條方塊: 懸停*::-webkit-scrollbar-thumb:hover background-color: var(--btn-hover-color)// 滾動條方塊: 點擊*::-webkit-scrollbar-thumb:active 深色模式顏色 /source/css/_mode/darkmode.styl 顏色取代 #121212 -&gt; #2F3437 #2c2c2c -&gt; #60666C 個別調整 12345678910111213141516[data-theme=&#x27;dark&#x27;] // 調整 1 --card-bg: lighten(#2F3437, 5) // 調整 2 --btn-bg: lighten(#2F3437, 10) #page-header:before // 調整 3 background-color: darken(#2F3437, 2) #article-container figure.highlight box-shadow: none .highlight-tools // 調整 4 background: lighten(#2F3437, 0) !important 閱讀模式顏色 /source/css/_mode/readmode.styl 個別調整 1234if hexo-config(&#x27;readmode&#x27;) [data-theme=&#x27;dark&#x27;] .read-mode --readmode-light-color: darken(#2F3437, 2) 文章頁隱藏卡片讓卡片經過判斷後產生 /themes/butterfly/layout/includes/widget/index.pug 123456789101112131415 &lt;!-- 刪除 --&gt; #aside_content.aside_content- if theme.aside.card_author.enable- !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_author&#39;, &#123;&#125;, &#123;cache:theme.fragment_cache&#125;)- if theme.aside.card_announcement.enable- !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_announcement&#39;, &#123;&#125;, &#123;cache:theme.fragment_cache&#125;) .sticky_layout &lt;!-- 新增 --&gt; else+ if theme.aside.card_author.enable+ !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_author&#39;, &#123;&#125;, &#123;cache:theme.fragment_cache&#125;)+ if theme.aside.card_announcement.enable+ !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_announcement&#39;, &#123;&#125;, &#123;cache:theme.fragment_cache&#125;) if theme.aside.card_recent_post.enable !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_recent_post&#39;, &#123;&#125;, &#123;cache:theme.fragment_cache&#125;) Head 加入 robots當搜尋引擎爬蟲機器人進入我們網站後，我們可以在 head 中的 meta 設定 robots，告訴機器人這個頁面我是否想要在搜尋引擎上建立索引，還有我是否要傳遞權重給我網站頁面中的連結，例如：meta(name=&quot;robots&quot; content=&quot;index,follow&quot;)。 需要注意的是，如果頁面設定是 noindex，也就是不希望機器人將這個頁面建立索引，在網站中的 sitemap.xml 中也不應該包含該頁面，因為這時爬蟲機器人被你叫來建立索引，結果你的頁面告訴他禁止建立索引，在後台報表會出現報錯，雖然對我們來說實際效果差不多，但 GoogleBot 不希望我們這樣做。 /themes/butterfly/layout/includes/head.pug 1include .&#x2F;head&#x2F;robots.pug /themes/butterfly/layout/includes/head/robots.pug 123456789101112131415if page.robots meta(name&#x3D;&quot;robots&quot; content&#x3D;page.robots)else if is_home() if page.prev &#x3D;&#x3D; 0 meta(name&#x3D;&quot;robots&quot; content&#x3D;&quot;index,follow&quot;) else meta(name&#x3D;&quot;robots&quot; content&#x3D;&quot;noindex,follow&quot;)else if is_archive() meta(name&#x3D;&quot;robots&quot; content&#x3D;&quot;noindex,follow&quot;)else if is_category() meta(name&#x3D;&quot;robots&quot; content&#x3D;&quot;noindex,follow&quot;)else if is_tag() meta(name&#x3D;&quot;robots&quot; content&#x3D;&quot;noindex,follow&quot;)else if is_post() meta(name&#x3D;&quot;robots&quot; content&#x3D;&quot;index,nofollow&quot;) Gitalk 留言板 ID主題預設會使用網址的 MD5 碼當 Issues 的 ID，此處改回使用網址當 ID。 /themes/butterfly/layout/includes/third-party/comments/gitalk.pug 1234 &lt;!-- 刪除 --&gt;- id: &#39;!&#123;md5(page.path)&#125;&#39;, &lt;!-- 新增 --&gt;+ id: &#39;!&#123;page.path&#125;&#39;, 調整文字大小先調整主題配置檔案，字體放大後，有些佈局排版也會變化，跟著一起調整。 /_config.butterfly.yml 12345font: global-font-size: 18px code-font-size: 18px font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;Helvetica Neue&quot;, Lato, Roboto, &quot;PingFang SC&quot;, &quot;Microsoft JhengHei&quot;, &quot;Microsoft YaHei&quot;, sans-serif code-font-family: consolas, Menlo, &quot;PingFang SC&quot;, &quot;Microsoft JhengHei&quot;, &quot;Microsoft YaHei&quot;, sans-serif /themes/butterfly/source/css/_page/homepage.styl 1234// 調整首頁卡片高度#recent-posts &amp; &gt; .recent-post-item height: 15.5em /themes/butterfly/source/css/_layout/aside.styl 123456// 調整文章目錄字型大小#aside_content #card-toc .toc-content font-size: 14px /themes/butterfly/source/css/_page/common.styl 1234567// 調整文章內容邊界.layout &amp; &gt; div:first-child:not(.recent-posts) padding: 25px 40px +maxWidth768() padding: 0.9rem .7rem !important /themes/butterfly/source/css/_layout/post.styl 123456789101112131415161718// 調整段落間距#article-container p margin: 0 0 1.6rembeautify() ol, ul margin-bottom: 2rem ul &gt; li:not(.tab) padding: 0 .2em 0 1.4emno-beautify() ol, ul margin-bottom: 2rem","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.yucheng.me/categories/Hexo/"}],"tags":[{"name":"主題","slug":"主題","permalink":"https://blog.yucheng.me/tags/%E4%B8%BB%E9%A1%8C/"}]},{"title":"KD-Tree 演算法筆記","slug":"KD-Tree 演算法筆記","date":"2020-10-06T11:55:21.000Z","updated":"2021-10-06T09:52:32.438Z","comments":true,"path":"post/kd-tree/","link":"","permalink":"https://blog.yucheng.me/post/kd-tree/","excerpt":"","text":"簡介KD 樹又稱 K 維樹 (K-dimensional tree)，是一種可以對 K 維資料進行劃分的資料結構，可以看成二元搜尋樹的一種延伸，不斷的對空間中的維度做劃分，利用搜尋樹剪枝的特性縮短時間複雜度，主要應用在多維空間搜尋，例如最近鄰居搜索。 背景以前在學資料結構的時候，學過使用二元搜尋樹將資料用大小區分來建樹，每個點代表著一筆資料，這個方法在資料只有一個維度的時候行的通，但當資料超過一個維度的時候就遇到困難，該怎麼對二維以上的陣列進行劃分。 想法對於多維陣列，我們多了一個以上的維度，因此在劃分時沒有一個劃分依據，此時我們可以將所有資料統一使用其中一個維度進行劃分，這個動作在二維資料內相當於將空間劃分為兩個部分，得到兩個新的子空間，如果我們繼續對這兩個子空間進行上述劃分，又會得到新的子空間，重複以上過程直到每個子空間都不能再劃分為止。 相當於不斷的用超平面將 K 維空間切分，每個節點對應一個 K 維超矩形區域。 以上就是建立 KD 樹的過程，上述過程中涉及到兩個重要的問題： 每次選擇其中一個維度進行劃分時，應該選擇哪個維度進行劃分？ 在某個維度上的進行劃分時，應該選擇哪個節點進行劃分？ 劃分方法術語 cell：KD 樹數據結構為把空間遞歸地劃分兩個不相交的超矩形（類似於超平面、超立方體的概念），每個超矩形所佔的空間即為一個 cell。 bounding rectangle：包含數據集中所有點的最小超矩形。其範圍小於等於該節點對應 cell 的大小。 aspect ratio：cells 中最長邊與最短邊的長度比，比值越大，數目 cell 越細長，反之，越肥胖。 spread：數據集在某維度上最大值減最小值。即該維度上 bounding rectangle 對應邊的長度。 準則以下列出 ANN 中提供的幾種劃分規則： standard kd-tree splitting rule（標準 KD 樹分割規則）： 基本思想：使創建出來的樹盡可能的保持平衡，樹越平衡代表著分割得越平均，搜尋的時間也就越少。 維度選擇有兩種方法（二擇一）： 選擇 spread 最大的維度，即 bounding rectangle 中最長邊對應的維度。即數據集在該維度上，最大值減最小值的結果為所有維度中最大的維度。 選擇變異數最大的維度，即數據在該維度上，數據分散的比較開的維度， 劃分點選擇：選擇數據集在該維度上的中位數做為劃分點，讓左子樹和右子樹的元素數量盡量保持一致，且其中一個子節點的元素值都小於另一個子節點。 優點：劃分到左右子樹中數據數量相同（或相差 1），為平衡二元樹。 缺點： 維度選擇方法一，可能出現細長的cell，容易增加回溯時遞迴搜尋的範圍。 維度選擇方法二，計算最大變異數的時間複雜度要高於計算最大 spread 的時間複雜度。 midpoint splitting rule（中點分割規則）： 基本思想：讓分割出的 cells 盡可能的減少產生細長的 cell，使劃分出的兩個 cells 都是肥胖的。 維度選擇：cell 中最長邊對應的維度。 劃分點選擇：cell 中最長邊對應的中心。 優點：找中心比找中值的時間複雜度更低。 缺點：導致數據集劃分不均勻，當數據大量聚集時，存在很多無用的空間劃分（即劃分時，所有數據都在一個區域，另一個區域沒有數據）。 sliding midpoint rule（滑動中點規則）： 基本思想：midpoint splitting rule 的改進版，規則大致相同，其認為兩種劃分為好的劃分： 平衡的劃分：使得劃分出的兩個子 cell 都是肥胖的（midpoint splitting rule中的思想） 使得較肥胖的 cell 中含有較少的數據點。（對無效劃分的處理） 維度選擇：選擇超矩形中最長邊對應的維度。（同 midpoint splitting rule） 劃分點的選擇：在劃分時，當劃分結果沒有包含任何數據集，出現無效劃分時，通過滑動分割點來消除無效劃分，若該維度的中點值為 a： 若所有數據在該維度上都大於 a，則以數據集中最小值來劃分空間，使左子樹區域中有 1 個點，右子樹有 n-1 個點。 若所有數據在該維度上都小於 a，則以數據集中最大值來劃分空間，使左子樹區域中有 n-1 個點，右子樹有 1 個點。 優點：通過滑動劃分點，可以消除無效的劃分。其可能存在細長的 cell，但其始終伴隨著一個該維度上較寬胖的 cell。 fair-split rule（公平分割規則）： standard kd-tree splitting rule 與 midpoint splitting rule 的折衷方法 基本思想：設定一個合理的 aspect ratio 值為 a。在劃分空間時盡量滿足子 cell 的 aspect ratio 小於 a 且盡量使數據均勻的分佈在兩個子 cell 中。 給定一個 cell： 根據 cell 各邊的長度，選出能夠使得劃分出兩個子 cell 能滿足 aspect ratio 小於 a 的所有維度。 在上述選出的維度中，選擇 bounding rectangle 中最長邊對應的維度。 在滿足 aspect ratio 小於 a 的前提下，在該維度上選擇一個使得數據點盡可能分佈均勻的劃分點來對 cell 進行最終的劃分。（standard kd-tree splitting rule 的思想 - 取中位數） 優點：相比於 midpoint splitting rule，對於無效的劃分，有更好的劃分結果。然而當數據高度聚集時，仍有可能出現與 midpoint splitting rule 相同的結果。 sliding fair-split rule（滑動公平分割規則）：結合 fair-split rule 與 sliding midpoint rule 的思想 基本思想：上述 fair-split rule 劃分不能避免：由於必須滿足 aspect ratio 小於 a，使得極端情況下，使數據點盡可能的均勻分佈的劃分仍然為一個無效劃分的情況。此時可以通過滑動劃分點至該維度上最大（或最小）的值處（即 sliding 的思想）來進行劃分（此時無需滿足 aspect ratio 小於 a 的條件），使得每個劃分都至少含有一個數據點。 無論哪種劃分規則，都不會影響 KD 樹搜索結果的正確性，只會影響其樹的形狀和深度，從而影響搜索性能。總而言之，希望得到的 KD 樹的結構盡量滿足兩個特點： 盡可能的平衡 盡可能的讓 cell 肥胖（使搜索過程中與超矩形相交的個數盡量少，以減小到韃子葉的次數） 資料儲存方法將數據儲存在所有節點 葉節點、中間節點： 維度 點 左子節點 右子節點 將數據僅儲存在葉節點 中間節點： 維度 劃分軸 左子節點 右子節點 葉節點： 點 建樹這裡我們建立 KD 樹的方法使用： standard kd-tree splitting rule（標準 KD 樹分割規則） 選擇最大變異數做為維度選擇方法 將數據儲存在所有節點 決定上述兩個方法後，我們 KD 樹的建立過程如下： 在 K 維資料集合中選擇具有最大變異數的維度 K，然後在該維度上選擇中位數 m 做為分割點對該資料集合進行劃分，得到兩個子集合，同時建立一個樹節點用於儲存。 對兩個子集合重複 (1) 步驟的過程，直到所有子集合都不能在劃分為止。 範例假設有一個二維陣列：[[2, 3], [5, 4], [9, 6], [4, 7], [8, 1], [7, 2]] KD 樹演算法就是要確定下圖中這些分割空間的分割線（多維空間即為分割平面，一般為超平面）。 分別計算 x, y 方向上資料的變異數，得出 x 方向上的變異數最大 根據 x 軸方向的值 (2, 4, 5, 7, 8, 9)，排序選出中位數為 5 和 7，這裡選擇 7 當作分割點，所以該節點中的資料為 (7, 2)。這樣該節點的分割超平面就是通過 (7, 2) 並垂直於 x 軸的直線 x = 7。 確定左子空間和右子空間。以 x = 7 為分割超平面將整個空間分為兩個部分，x &lt;= 7 的部分為左子空間，包含 3 個節點 (2, 3), (4, 7), (5, 4)，另一部分為右子空間，包含2個節點 (8, 1), (9, 6)。 KD 樹的建立是一個遞迴的過程。繼續對左子空間和右子空間內的資料重複根節點的操作就可以得到下一級子節點 (5, 4) 和 (9, 6) (也就是左右子空間的根節點)，同時將空間和資料進一步細分。如此反覆值到空間中只包含一個資料點。 尋找最近點KD Tree 建好之後，接下來就可以使用 KD Tree 對元素搜尋最近點，方法如下： 查詢目標節點：Q 當前最佳節點：P 建立一個空的堆疊 S。 從根節點開始走訪，根據 Q 在分割維度中是否小於或大於當前節點，向左或向右移動，將每個走訪過的節點都存入（Push） S。 一旦不能再走訪，設定 P 為無限大，並開始循環以下： 將 S 取出（Pop）為當前節點 C。從概念上來看，S 會不斷取出走訪過的節點，意義即為從葉節點返回父節點，稱為回溯。 計算 C 到 Q 的距離，如果 C 比 P 更接近 Q，那麼更新 P 為該節點。 檢查在 C 分割面的另一邊是否有比 P 距離更近的節點。從概念上來說，以 Q 為中心，以 P 為半徑劃一個超球面，看這個超球面是否穿過了分割平面。因為平面都是座標軸對應的，所以只需要簡單比較 Q 和當前節點分割面的距離是否比 P 距離更小。 如果超球面穿越分割面，那麼分割面的另外一側可能還有最近點，所以需要對 KD 樹的另一邊的分支在執行一次走訪，將每個走訪過的節點都存入（Push） S。 如果超球面沒有穿過分割面，則分割面的另外一邊的整個分支會被剪掉，稱為剪枝，並繼續搜尋其它節點，即回溯。 當 S 為空，也就是算法最後回溯到根節點的時候，搜尋完成，返回結果。 通常，算法使用距離平方來做比較，而不使用更耗時的平方根。可以通過維持當前最佳的平方距離來節省計算量。 計算距離步驟可以在檢查分割面後面，優點是在判斷完分割面沒有相交的節點後，可以直接判斷跳過計算該距離的步驟，因為只要沒有與分割面相交，距離就不會更近。這裡因為解釋順序方便將距離計算在前面，實際這樣會在某些情況額外計算一些無意義的距離。 剪枝概念 KD 演算法的核心技巧在於剪枝，在已經搜索到 B 時，發現其到 B 的距離，要比到 A 的右子樹的平面距離還更短，所以整個 A 的右子樹都被剪枝，一下子剪去了一半的點。 這個算法也可以通過簡單的修改做多種延伸。比如，可用於計算 K 個最近臨點，這個時候需要保存 K 個當前最佳而不是一個。分支能夠剪掉的條件是：K 個點都找到，並且分支中沒有比這 K 個最佳更近的點。 也可以轉換為近似算法加快運行。例如，近似最近點搜尋可以通過指定檢查節點的上限來達成，也可以基於時鐘(在硬體實現更合適)終止搜尋過程。 範例一 如圖所示，點 Q(2.1, 3.1) 為要查詢的點。 從根節點開始走訪，根據分割維度的數據判斷應該進入左或右子樹 進入 (7, 2)，分割軸為 x，(2.1 &lt; 7)，進入左子樹 進入 (5, 4)，分割軸為 y，(3.1 &lt; 4)，進入左子樹 進入 (2, 3)，分割軸為 x，(2.1 &gt; 2)，進入右子樹 右子樹為空，因此停止走訪，搜尋路徑依序為 (7, 2) -&gt; (5, 4) -&gt; (2, 3) 根據搜尋路徑尋找最近鄰點： 取出 (2, 3)，分割軸為 x 計算到 Q 的距離得出 0.14，更新 P = 0.14 計算 Q 到 x = 2 的距離，|2.1 - 2| = 0.1 因為 0.1 &lt; 0.14，與超球面相交，進入 (2, 3) 的另一子樹 另一子樹為空，因此停止走訪，搜尋路徑依序為 (7, 2) -&gt; (5, 4) 取出 (5, 4)，分割軸為 y 計算到 Q 的距離得出 3.03，3.03 &gt; P，不用更新 P 計算 Q 到 y = 4 的距離，|3.1 - 4| = 0.9 因為 0.9 &gt; 0.14，沒有與超球面相交，剪掉 (5, 4) 的另一子樹 取出 (7, 2)，分割軸為 x 計算到 Q 的距離得出 5.02，5.02 &gt; P，不用更新 P 計算 Q 到 x = 7 的距離，|2.1 - 7| = 4.9 因為 4.9 &gt; 0.14，沒有與超球面相交，剪掉 (7, 2) 的另一子樹 至此搜尋路徑中的節點已經全部回溯完畢，返回： 最近鄰點 P(2, 3) 最近距離為 0.1414 範例二 如下圖所示，點 Q(2, 4.5) 為要查詢的點。 從根節點開始走訪，根據分割維度的數據判斷應該進入左或右子樹 進入 (7, 2)，分割軸為 x，(2 &lt; 7)，進入左子樹 進入 (5, 4)，分割軸為 y，(4.5 &gt; 4)，進入右子樹 進入 (4, 7)，分割軸為 x，(2 &lt; 4)，進入左子樹 左子樹為空，因此停止走訪，搜尋路徑依序為 (7, 2) -&gt; (5, 4) -&gt; (4, 7) 根據搜尋路徑尋找最近鄰點： 取出 (4, 7)，分割軸為 x 計算到 Q 的距離得出 3.20，更新 P = 3.20 計算 Q 到 x = 4 的距離，|2 - 4| = 2 因為 2 &lt; 3.20，與超球面相交，進入 (4, 7) 的另一子樹 另一子樹為空，因此停止走訪 取出 (5, 4)，分割軸為 y 計算到 Q 的距離得出 3.04，3.04 &lt; P，P = 3.04 計算 Q 到 y = 4 的距離，|4.5 - 4| = 0.5 因為 0.5 &lt; 3.04，與超球面相交，進入 (5, 4) 的另一子樹 進入 (2, 3)，分割軸為 x，(2 &lt;= 2)，進入左子樹 左子樹為空，因此停止走訪，搜尋路徑依序為 (7, 2) -&gt; (2, 3) 取出 (2, 3)，分割軸為 x 計算到 Q 的距離得出 1.5，1.5 &lt; P，P = 1.5 計算 Q 到 x = 2 的距離，|2 - 2| = 0 因為 0 &lt; 1.5，與超球面相交，進入 (2, 3) 的另一子樹 另一子樹為空，因此停止走訪，搜尋路徑依序為 (7, 2) 取出 (7, 2)，分割軸為 x 計算到 Q 的距離得出 5.59，5.59 &gt; P，不用更新 P 計算 Q 到 x = 7 的距離，|2 - 7| = 5 因為 5 &gt; 1.5，沒有與超球面相交，剪掉 (7, 2) 的另一子樹 至此搜尋路徑中的節點已經全部回溯完畢，返回： 最近鄰點 P(2, 3) 最近距離為 1.5 添加節點和 BST 樹添加節點的方式一樣。首先，從根節點開始判斷從哪個維度開始分割的，再依據該維度的元素確定要進入左節點還是右節點，直到找到葉節點，將待添加的節點依據該分割維度元素的大小進入左節點或右節點中。 按照這種方式添加節點可能會導致樹失去平衡，從而降低樹的性能。樹性能降低的比例取決於樹之前的空間分布，以及添加的節點樹和樹原大小的關係。如果樹變得很不平衡，就需要做樹的平衡，從而恢復依賴於樹平衡的查詢性能，例如最近臨查詢。 刪除節點從已經建立好的樹之中刪除節點，且不破壞限制條件，最簡單的方法是將待刪除的節點及其子樹做成集合，並重新建立子樹。 另外一個方法是為待刪除節點找一個替代點。首先，找到包含待刪除點的節點R，如果 R 是葉節點，則不需要替換，直接刪除R。如果是其他情況，從以 R 為根的子樹中找到一個替代點，設為 p，交換 R 和 p，再刪除 p。 找到一個可替換點的方法：假設節點 R 通過 x 軸來區分，並且 R 有一個右節點，找到這個右節點及其子樹中 x 值最小的點， 即可做為替換點。反之，找到左節點及其子樹中 x 值最大的點，即可做為替換點。 平衡樹KD 樹的平衡需要非常小心，因為 KD 樹通過多個維度來排序，所以樹旋轉這樣的技術不能用來做平衡，原因是這個技術可能破壞 KD 樹的限制條件。 KD 樹有幾種變體，包括：divided k-d tree, pseudo k-d tree, K-D-B-tree。這些變體裡面有許多是自適應 KD 樹。 範圍搜索範圍搜索指的是使用範圍參數來做檢索，例如，如果一個 KD 樹儲存的是收入和年齡的樹值，那麼一個範圍搜索可能是：查找樹中年齡在 20 到 50，收入在 50000 到 80000 的節點。 應為 KD 樹在樹的每一層對域的範圍做了分割，所以可以高效執行範圍查詢。 高維數據會降低性能在隨機分布的數據點上，搜尋最近點時間複雜度是 O(log(N))，在高維度空間，維數災難會導致算法需要訪問遠多於低維空間的分支。在實踐中，如果節點的數量僅略高於維度的數量時，該算法僅比對所有點搜索的線性搜索略好。 在高維空間，KD樹是不適合做高效的近鄰搜尋。通常原則是，如果維度是 K，樹據點樹是 N，需要滿足 N &gt;&gt; 2^k。否則，當 KD 樹用在高維度數據上，搜尋時絕大多數節點需要做評估，所以性能不一定比窮舉搜索好，應該替換為一個近似的近鄰搜尋。 參考文獻 ANN (Approximate Nearest Neighbor) Programming Manual It’s okay to be skinny, if your friends are fat k-d tree Point kd-tree Kd Tree Kd Tree 演算法詳解 K - 近鄰算法 KNN 學習筆記 KD 樹 / K-D 樹 KD-TREE 演算法原理 KD Tree 的原理及 Python 實現 KD-Tree 原理詳解 【量化課堂】kd 樹算法之詳細篇","categories":[{"name":"演算法","slug":"演算法","permalink":"https://blog.yucheng.me/categories/%E6%BC%94%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"kd tree","slug":"kd-tree","permalink":"https://blog.yucheng.me/tags/kd-tree/"},{"name":"資料結構","slug":"資料結構","permalink":"https://blog.yucheng.me/tags/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B/"},{"name":"空間搜索","slug":"空間搜索","permalink":"https://blog.yucheng.me/tags/%E7%A9%BA%E9%96%93%E6%90%9C%E7%B4%A2/"}]},{"title":"開源中文字體收藏","slug":"開源中文字體收藏","date":"2020-09-01T16:25:04.000Z","updated":"2021-10-06T09:52:32.438Z","comments":true,"path":"post/open-source-chinese-font-list/","link":"","permalink":"https://blog.yucheng.me/post/open-source-chinese-font-list/","excerpt":"","text":"整理一些能夠免費使用的開源字體，並標註授權方式，有些字體能夠免費使用但禁止商用，請自行注意。 字型資料整理justfont jf open 粉圓 授權：SIL OPEN FONT LICENSE (OFL-1.1) 來源：justfont Github：https://github.com/justfont/open-huninn-font 網站：https://blog.justfont.com/2020/02/huninn-preview/#more-9485 ButTaiwan 源石黑體 授權：SIL Open Font License 1.1 來源：ButTaiwan Github：https://github.com/ButTaiwan/genseki-font 源樣黑體 授權：SIL Open Font License 1.1 來源：ButTaiwan Github：https://github.com/ButTaiwan/genyog-font 源樣明體 授權：SIL Open Font License 1.1 來源：ButTaiwan Github：https://github.com/ButTaiwan/genyo-font 源流明體 授權：SIL Open Font License 1.1 來源：ButTaiwan Github：https://github.com/ButTaiwan/genryu-font 源雲明體 授權：SIL Open Font License 1.1 來源：ButTaiwan Github：https://github.com/ButTaiwan/genwan-font 源泉圓體 授權：SIL Open Font License 1.1 來源：ButTaiwan Github：https://github.com/ButTaiwan/gensen-font 自家製フォント工房 源柔黑體 授權：SIL Open Font License 1.1 來源：自家製フォント工房 網站：http://jikasei.me/font/genjyuu/ 瀨戶字體 瀨戶字體 備註：原版 授權：Open Font License 1.1 來源：瀨戶 網站：https://zh-tw.osdn.net/projects/setofont/ 內海字體 備註：基於 瀨戶字體 的修正版 授權：OFL-1.1 License 來源：內海字體 Github：https://github.com/max32002/naikaifont cjkFonts 全瀨體 備註：使用 瀨戶字體 透過深度學習的修正版 授權：SIL Open Font License 來源：cjkFonts 網站：https://www.cjkfonts.io/blog/cjkfonts_allseto 小賴字體 備註：基於 瀨戶字體、內海字體、cjkFonts 全瀨體 的修正版 授權：SIL Open Font License 1.1 來源：小賴字體 Github：https://github.com/lxgw/kose-font/ 花園明朝體 花園明朝體 授權：SIL Open Font License (OFL) 來源：花園明朝體 (HanaMin) 網站：http://fonts.jp/hanazono/ IPAmj明朝 IPAmj明朝 授權：IPA Font License Agreement v1.0 來源：IPAmj明朝 (IPAmjMincho) 網站：https://mojikiban.ipa.go.jp/1300.html cwtex-q-fonts cwTeX 字型 授權：SIL Open Font License (Version 1.1) 來源：cwtex-q-fonts Github：https://github.com/l10n-tw/cwtex-q-fonts 文泉驛 文泉驛正黑體 授權：GNU General Public License version 3.0 (GPLv3) 來源：文泉驛 網站：http://wenq.org/ 文泉驛微米黑 授權：GNU General Public License version 3.0 (GPLv3) 來源：文泉驛 網站：http://wenq.org/ 清松手寫體 清松手寫體 授權：SIL Open Font License 來源：游清松 - 清松手寫體 Facebook 社團：https://www.facebook.com/groups/549661292148791/ Github：https://github.com/jasonhandwriting/JasonHandwriting 翰字鑄造 台北黑體 授權：SIL Open Font License 1.1 來源：翰字鑄造 GoogleDrive：https://drive.google.com/drive/u/0/folders/1OJOOly6jo9RID3EE2f7S3N7T-8ZWPv6N 網站：https://sites.google.com/view/jtfoundry/zh-tw/downloads 全字庫 全字庫正楷體 授權：政府資料開放授權條款 來源：國家發展委員會 網站：https://data.gov.tw/dataset/5961?fbclid=IwAR2xVeUaoV3p0d4fJskkm92Ggfc9q8KimzmHPqMqGcqVJA-srDF0LAdZ8j8 全字庫正宋體 授權：政府資料開放授權條款 來源：國家發展委員會 網站：https://data.gov.tw/dataset/5961?fbclid=IwAR2xVeUaoV3p0d4fJskkm92Ggfc9q8KimzmHPqMqGcqVJA-srDF0LAdZ8j8 Adobe 思源黑體 ( Source Han Sans ) 授權：SIL OPEN FONT LICENSE Version 1.1 來源：Adobe Github：https://github.com/adobe-fonts/source-han-sans 網站：https://fonts.google.com/specimen/Noto+Sans+TC?subset=chinese-traditional 思源宋體 ( Source Han Serif ) 授權：SIL OPEN FONT LICENSE Version 1.1 來源：Adobe Github：https://github.com/adobe-fonts/source-han-serif/tree/release 網站：https://fonts.google.com/specimen/Noto+Serif+TC?subset=chinese-traditional 思源等寬 ( Source Han Mono ) 授權：SIL OPEN FONT LICENSE Version 1.1 來源：Adobe Github：https://github.com/adobe-fonts/source-han-mono 刻石錄 I.明體 授權：IPA 開放字型授權條款 第 1.0 版 來源：刻石錄 網站：https://github.com/ichitenfont/I.Ming 網站：http://founder.acgvlyric.org/iu/doku.php/%E9%80%A0%E5%AD%97:%E9%96%8B%E6%BA%90%E5%AD%97%E5%9E%8B_i.%E6%98%8E%E9%AB%94 I.顏體 授權：GNU GPL 2.0 或以上 來源：刻石錄 網站：http://founder.acgvlyric.org/iu/doku.php/%E9%80%A0%E5%AD%97:%E9%96%8B%E6%BA%90%E5%AD%97%E5%9E%8B_i.%E9%A1%8F%E9%AB%94 I.鋼筆鶴體 授權：GNU GPL 2.0 或以上 來源：刻石錄 網站：http://founder.acgvlyric.org/iu/doku.php/%E9%80%A0%E5%AD%97:%E9%96%8B%E6%BA%90%E5%AD%97%E5%9E%8B_i.%E9%8B%BC%E7%AD%86%E9%B6%B4%E9%AB%94 教育部 教育部標準楷書 授權：創用 CC「姓名標示 - 禁止改作」3.0 臺灣版授權 來源：中華民國教育部 網站：https://language.moe.gov.tw/result.aspx?classify_sn=23&amp;subclassify_sn=436&amp;content_sn=47 教育部標準宋體 授權：創用 CC「姓名標示 - 禁止改作」3.0 臺灣版授權 來源：中華民國教育部 網站：https://language.moe.gov.tw/result.aspx?classify_sn=23&amp;subclassify_sn=436&amp;content_sn=48 教育部隸書 授權：創用 CC「姓名標示 - 禁止改作」3.0 臺灣版授權 來源：中華民國教育部 網站：https://language.moe.gov.tw/result.aspx?classify_sn=23&amp;subclassify_sn=436&amp;content_sn=49 王漢宗 王漢宗 42 套自由字型 備註1：網站訊息顯示有 48 套，但實際下載是 42 套。 備註2：在下方字型列表中列出較具爭議的的 10 個王漢宗自由字型，請斟酌使用 授權：GNU GPL v2 網站：https://123.briian.com/forum.php?mod=viewthread&amp;tid=2152 爭議字型 ( 詳細內容 )： 王漢宗中仿宋 王漢宗中仿宋簡體 王漢宗隸書體 王漢宗中明體 王漢宗粗明體 王漢宗特明體 王漢宗細圓體 王漢宗特圓體 王漢宗疊圓體 王漢宗勘亭流 王漢宗綜藝體 王漢宗中行書 王漢宗綜藝體雙空陰 王漢宗粗楷體簡體 文鼎 文鼎PL細上海宋 授權：文鼎公眾授權書（1999 年版本） 來源：文鼎科技 網站：https://123.briian.com/forum.php?mod=viewthread&amp;tid=5429 文鼎PL中楷 授權：文鼎公眾授權書（1999 年版本） 來源：文鼎科技 網站：https://123.briian.com/forum.php?mod=viewthread&amp;tid=5429 文鼎PL明體U20-L 授權：公眾授權字型、禁止商業使用、不屬於自由軟體許可 來源：文鼎科技 網站：http://www.arphic.com.tw/2019/03/27/%E6%96%87%E9%BC%8E%E5%85%AC%E7%9C%BE%E6%8E%88%E6%AC%8A%E5%AD%97%E5%9E%8B/ 文鼎PL報宋2GBK 授權：公眾授權字型、禁止商業使用、不屬於自由軟體許可 來源：文鼎科技 網站：http://www.arphic.com.tw/2019/03/27/%E6%96%87%E9%BC%8E%E5%85%AC%E7%9C%BE%E6%8E%88%E6%AC%8A%E5%AD%97%E5%9E%8B/ 名詞解釋ttc檔 ( TrueType Collection )字型集合檔案，多個字型 .ttc 組合成一個字體集合文件，單一文件能夠包含多種字體 ttf檔 ( TrueType Font )單一字型檔，存放一種字型 otf檔 ( OpenType Font )以 Unicode 為開發基礎，儲存的字型比 TrueType 還要多，螢幕表現也更平滑漂亮，並且可以安裝在 Windows 與 Mac 上 相關文獻 被吉發函的創作者，字型廠商恐成最大贏家？創作者避免字體侵權的攻略 簡單描述一下YouTuber合法使用中文字型的管道 思源改作，免費中文字體下載指南 [筆記] 2020 合法免費中文字型收集 / 開源 / 可商用 / 免費字體","categories":[{"name":"工具","slug":"工具","permalink":"https://blog.yucheng.me/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"開源字體","slug":"開源字體","permalink":"https://blog.yucheng.me/tags/%E9%96%8B%E6%BA%90%E5%AD%97%E9%AB%94/"},{"name":"免費字體","slug":"免費字體","permalink":"https://blog.yucheng.me/tags/%E5%85%8D%E8%B2%BB%E5%AD%97%E9%AB%94/"},{"name":"中文字體","slug":"中文字體","permalink":"https://blog.yucheng.me/tags/%E4%B8%AD%E6%96%87%E5%AD%97%E9%AB%94/"}]},{"title":"Hexo 網站架設","slug":"Hexo 網站架設","date":"2020-08-27T16:47:47.000Z","updated":"2021-10-06T09:52:32.438Z","comments":true,"path":"post/hexo-website-setup/","link":"","permalink":"https://blog.yucheng.me/post/hexo-website-setup/","excerpt":"","text":"使用 Hexo 產生靜態網站，並部署在 GitHub Pages 上，可用於產生個人網站或形象網站。 安裝環境 Node.js https://nodejs.org/ Git https://git-scm.com/ 開啟 Cmd 或 Git Bash，輸入指令安裝 Hexo。 1npm install hexo-cli -g 建立環境安裝完 Hexo 後，建立一個資料夾，並進入該資料夾進行 Hexo 初始化，網站的內容都將儲存在此處。 1hexo init 安裝相依套件。 1npm install 執行環境到此 Hexo 就已經安裝好了，網站資料夾內會產生 Hexo 架構檔案，可以啟動 server 查看網站。 1hexo server 開啟瀏覽器進入預設路徑 http://localhost:4000/。 停止 server 只需在 CLI 執行中斷命令 Ctrl + C 如果想要變更連接埠 (port)，可以在執行時使用 -p 選項指定其他連接埠。 1hexo server -p 5000 產生網站內容在本地電腦啟動環境，主要是確認產生的網站內容是否正確、網頁是否打的開，接著就是要讓 Hexo 經過主題渲染，產生我們的網站檔案。 1hexo generate 生成的檔案會放在根目錄的 Public 資料夾下，裡面存放有網站最重要的入口檔案 index.html 等檔案，部署網站時就是發佈這個 Public 資料夾。 清除快取與靜態檔案對於已經產生過的網站內容，如果要重新產生，可以使用 clean 清除快取檔案 (db.json) 與 靜態檔案 (Public)。 1hexo clean 部署網站到 GitHub Pages先在 GitHub 上創建一個資料庫名稱為 &lt;username&gt;.github.io &lt;username&gt; 代表你的 GitHub 用戶名 回到 CLI 安裝 hexo-deployer-git。 1npm install hexo-deployer-git --save 編輯網站目錄下 _config.yml 文件，並在結尾處加入 deploy 填寫部署網站相關資料。 /_config.yml 1234deploy: type: git repo: https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git branch: master yaml 檔案中 : 後面需要保持一個空格 接著還要填寫 config.yml 內的 url 成剛剛建立的儲存庫 url。 /_config.yml 1url: https://&lt;username&gt;.github.io 部署網站到 GitHub 上。先使用 clean 清除快取檔案，再使用 generate 產生網站檔案，最後使用 deploy 部署網站。 1hexo clean &amp;&amp; hexo deploy --generate 部署完成後就可以到網站上查看結果 &lt;username&gt;.github.io，通常 GitHub 會有緩存，可以等 5~15 分鐘左右再進入網站看。 這時候已經部署完畢，但可能還是會出現 404 頁面，因為還沒有開啟儲存庫的 Github Pages 功能。 進入儲存庫的 Setting，往下找到 Github Pages 區塊，並將 Source 指向到 master 再按下 Save 即可。 清理瀏覽器快取如果在本地端更改設定測試時沒有問題，部署到網路上後卻沒有改變或顯示錯誤，大多數時候是因為電腦的瀏覽器的快取檔案原因。 解決辦法可嘗試清除瀏覽器的快取資料，再重新整理網站載入資料。 新增文章建立一篇新的文章，如果沒有設定 layout，則會使用 _config.yml 中的 default_layout 設定代替。如果標題包含空格的話，需使用引號刮起來。 1hexo new [layout] &lt;title&gt; [layout]：文章布局 post draft &lt;title&gt;：文章標題 新增草稿方法一建立一篇新的草稿，草稿在 Hexo 執行時不會進行渲染。需透過 publish 發布草稿，將草稿移動到 source/_posts 資料夾。 1hexo new draft &lt;title&gt; 發布草稿 1hexo publish draft &lt;title&gt; 草稿預設不會顯示於頁面中，可在執行時加上 --draft 選項，或是把 render_drafts 設定改為 true 來預覽草稿。 方法二如果覺得每次還要輸入發布草稿很麻煩，也可以在 _post 資料夾內新增一個資料夾以底線開頭，因為 Hexo 不會編譯 _post 內有 _ 開頭的資料夾，所以可以建立一個資料夾例如 _draft，然後將還不想要發布的文章丟到 /source/_post/_draft/ 裡面即可。 檔案架構產生完 Hexo 檔案後大致有以下檔案 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes _config.yml網站配置檔案，設置網站基本設定。 package.json應用程式資料，包含使用的一些相依套件。 scaffolds新增文章時使用的架構資料夾，Hexo 會根據 scaffolds 來建立檔案。 source來源資料夾，存放網站的內容，Markdown 和 HTML 檔案在產生時會經過渲染到 Public 資料夾，而其他的檔案會直接拷貝過去。 themes主題資料夾，Hexo 會根據主題來產生靜態檔案。 參考資料 文件 | Hexo","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.yucheng.me/categories/Hexo/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"https://blog.yucheng.me/tags/Node-js/"},{"name":"Git","slug":"Git","permalink":"https://blog.yucheng.me/tags/Git/"},{"name":"GitHub Pages","slug":"GitHub-Pages","permalink":"https://blog.yucheng.me/tags/GitHub-Pages/"}]}],"categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.yucheng.me/categories/Hexo/"},{"name":"演算法","slug":"演算法","permalink":"https://blog.yucheng.me/categories/%E6%BC%94%E7%AE%97%E6%B3%95/"},{"name":"工具","slug":"工具","permalink":"https://blog.yucheng.me/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"子網域","slug":"子網域","permalink":"https://blog.yucheng.me/tags/%E5%AD%90%E7%B6%B2%E5%9F%9F/"},{"name":"網站地圖","slug":"網站地圖","permalink":"https://blog.yucheng.me/tags/%E7%B6%B2%E7%AB%99%E5%9C%B0%E5%9C%96/"},{"name":"搜尋引擎收錄","slug":"搜尋引擎收錄","permalink":"https://blog.yucheng.me/tags/%E6%90%9C%E5%B0%8B%E5%BC%95%E6%93%8E%E6%94%B6%E9%8C%84/"},{"name":"Google Analytics","slug":"Google-Analytics","permalink":"https://blog.yucheng.me/tags/Google-Analytics/"},{"name":"主題","slug":"主題","permalink":"https://blog.yucheng.me/tags/%E4%B8%BB%E9%A1%8C/"},{"name":"kd tree","slug":"kd-tree","permalink":"https://blog.yucheng.me/tags/kd-tree/"},{"name":"資料結構","slug":"資料結構","permalink":"https://blog.yucheng.me/tags/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B/"},{"name":"空間搜索","slug":"空間搜索","permalink":"https://blog.yucheng.me/tags/%E7%A9%BA%E9%96%93%E6%90%9C%E7%B4%A2/"},{"name":"開源字體","slug":"開源字體","permalink":"https://blog.yucheng.me/tags/%E9%96%8B%E6%BA%90%E5%AD%97%E9%AB%94/"},{"name":"免費字體","slug":"免費字體","permalink":"https://blog.yucheng.me/tags/%E5%85%8D%E8%B2%BB%E5%AD%97%E9%AB%94/"},{"name":"中文字體","slug":"中文字體","permalink":"https://blog.yucheng.me/tags/%E4%B8%AD%E6%96%87%E5%AD%97%E9%AB%94/"},{"name":"Node.js","slug":"Node-js","permalink":"https://blog.yucheng.me/tags/Node-js/"},{"name":"Git","slug":"Git","permalink":"https://blog.yucheng.me/tags/Git/"},{"name":"GitHub Pages","slug":"GitHub-Pages","permalink":"https://blog.yucheng.me/tags/GitHub-Pages/"}]}